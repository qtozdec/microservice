apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: logging
  labels:
    app: logstash
spec:
  replicas: 2
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:8.10.0
        ports:
        - containerPort: 5044
        - containerPort: 9600
        resources:
          limits:
            memory: "2Gi"
            cpu: "1000m"
          requests:
            memory: "1Gi"
            cpu: "500m"
        env:
        - name: LS_JAVA_OPTS
          value: "-Xms1g -Xmx1g"
        volumeMounts:
        - name: config-volume
          mountPath: /usr/share/logstash/config
        - name: logstash-pipeline-volume
          mountPath: /usr/share/logstash/pipeline
      volumes:
      - name: config-volume
        configMap:
          name: logstash-configmap
          items:
          - key: logstash.yml
            path: logstash.yml
      - name: logstash-pipeline-volume
        configMap:
          name: logstash-configmap
          items:
          - key: logstash.conf
            path: logstash.conf
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: logging
  labels:
    app: logstash
spec:
  selector:
    app: logstash
  ports:
  - port: 5044
    targetPort: 5044
    name: beats
  - port: 9600
    targetPort: 9600
    name: http
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-configmap
  namespace: logging
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline
    xpack.monitoring.enabled: true
    xpack.monitoring.elasticsearch.hosts: ["http://elasticsearch-client:9200"]
  logstash.conf: |
    input {
      beats {
        port => 5044
      }
      tcp {
        port => 5000
      }
    }
    
    filter {
      if [fields][logtype] == "microservice" {
        grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} \[%{DATA:service}\] %{DATA:class} - %{GREEDYDATA:msg}" }
        }
        date {
          match => [ "timestamp", "ISO8601" ]
        }
        mutate {
          add_field => { "service_type" => "microservice" }
        }
      }
      
      if [kubernetes] {
        mutate {
          add_field => { 
            "k8s_namespace" => "%{[kubernetes][namespace]}"
            "k8s_pod" => "%{[kubernetes][pod][name]}"
            "k8s_container" => "%{[kubernetes][container][name]}"
          }
        }
      }
    }
    
    output {
      elasticsearch {
        hosts => ["elasticsearch-client:9200"]
        index => "microservices-logs-%{+YYYY.MM.dd}"
        template_name => "microservices"
        template_pattern => "microservices-*"
        template => {
          "index_patterns" => ["microservices-*"]
          "settings" => {
            "number_of_shards" => 1
            "number_of_replicas" => 1
          }
          "mappings" => {
            "properties" => {
              "@timestamp" => { "type" => "date" }
              "level" => { "type" => "keyword" }
              "service" => { "type" => "keyword" }
              "message" => { "type" => "text" }
              "k8s_namespace" => { "type" => "keyword" }
              "k8s_pod" => { "type" => "keyword" }
            }
          }
        }
      }
      stdout { codec => rubydebug }
    }