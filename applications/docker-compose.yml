services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: ${DB_USERNAME:-microservices_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
    ports:
      - "15432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-microservices_user}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data

  user-service:
    build: ./user-service
    ports:
      - "8081:8081"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_REDIS_PASSWORD=${REDIS_PASSWORD:-changeme}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${USER_DB_NAME:-user_service_db}
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME:-microservices_user}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD:-changeme}
      - JWT_SECRET=${JWT_SECRET:-default-secret-key-change-in-production}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    restart: unless-stopped

  order-service:
    build: ./order-service
    ports:
      - "8082:8082"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASSWORD:-changeme}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${ORDER_DB_NAME:-order_service_db}
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME:-microservices_user}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD:-changeme}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - JWT_SECRET=${JWT_SECRET:-default-secret-key-change-in-production}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
    restart: unless-stopped

  notification-service:
    build: ./notification-service
    ports:
      - "8083:8083"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASSWORD:-changeme}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${NOTIFICATION_DB_NAME:-notification_service_db}
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME:-microservices_user}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD:-changeme}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - JWT_SECRET=${JWT_SECRET:-default-secret-key-change-in-production}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
    restart: unless-stopped

  inventory-service:
    build: ./inventory-service
    ports:
      - "8084:8084"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASSWORD:-changeme}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${INVENTORY_DB_NAME:-inventory_service_db}
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME:-microservices_user}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD:-changeme}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - JWT_SECRET=${JWT_SECRET:-default-secret-key-change-in-production}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
    restart: unless-stopped

  audit-service:
    build: ./audit-service
    ports:
      - "8085:8085"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASSWORD:-changeme}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${AUDIT_DB_NAME:-audit_service_db}
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME:-microservices_user}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD:-changeme}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - JWT_SECRET=${JWT_SECRET:-default-secret-key-change-in-production}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
    restart: unless-stopped

  frontend:
    build: ./frontend
    ports:
      - "3000:80"
    depends_on:
      - user-service
      - order-service
      - notification-service
      - inventory-service
      - audit-service
    environment:
      - NODE_ENV=production

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge