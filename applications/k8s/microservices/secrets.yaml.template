apiVersion: v1
kind: Secret
metadata:
  name: microservices-secrets
  namespace: microservices
  labels:
    app: microservices
    security.policy: improved
  annotations:
    secret.io/managed-by: "kubectl"
    secret.io/rotation-schedule: "quarterly"
    secret.io/last-rotation: "YYYY-MM-DD"
    secret.io/security-note: "Generated from template - all secrets base64 encoded"
type: Opaque
data:
  # Database Configuration - SECURE: Base64 encoded
  # Usage: echo -n "username" | base64
  SPRING_DATASOURCE_USERNAME: <BASE64_ENCODED_DB_USERNAME>
  
  # Usage: openssl rand -base64 24 | base64
  SPRING_DATASOURCE_PASSWORD: <BASE64_ENCODED_DB_PASSWORD>
  
  # Redis Configuration - SECURE: Base64 encoded
  # Usage: openssl rand -base64 32 | base64
  SPRING_DATA_REDIS_PASSWORD: <BASE64_ENCODED_REDIS_PASSWORD>
  
  # JWT Secret - SECURE: Base64 encoded, cryptographically strong
  # Usage: openssl rand -base64 32 | base64
  JWT_SECRET: <BASE64_ENCODED_JWT_SECRET>
  
  # Database URLs - SECURE: Base64 encoded
  # Usage: echo -n "jdbc:postgresql://postgres.devops.svc.cluster.local:5432/user_service_db" | base64
  USER_SERVICE_DB_URL: <BASE64_ENCODED_USER_DB_URL>
  ORDER_SERVICE_DB_URL: <BASE64_ENCODED_ORDER_DB_URL>
  NOTIFICATION_SERVICE_DB_URL: <BASE64_ENCODED_NOTIFICATION_DB_URL>
  INVENTORY_SERVICE_DB_URL: <BASE64_ENCODED_INVENTORY_DB_URL>
  AUDIT_SERVICE_DB_URL: <BASE64_ENCODED_AUDIT_DB_URL>

# CRITICAL SECURITY INSTRUCTIONS:
# =====================================
# 
# 1. NEVER COMMIT ACTUAL secrets.yaml (without .template)
# 2. Copy this template to secrets.yaml
# 3. Replace ALL <BASE64_ENCODED_*> placeholders with real base64 values
# 4. Use scripts/generate-secrets.sh for automated generation
# 5. Rotate secrets quarterly as per annotation
#
# QUICK SETUP:
# ============
# cp secrets.yaml.template secrets.yaml
# # Then edit secrets.yaml with real values
# 
# AUTO GENERATION EXAMPLE:
# ========================
# export DB_USER="microservices_user"
# export DB_PASS=$(openssl rand -base64 24) 
# export REDIS_PASS=$(openssl rand -base64 32)
# export JWT_SECRET=$(openssl rand -base64 32)
#
# # Apply base64 encoding:
# echo -n "$DB_USER" | base64
# echo -n "$DB_PASS" | base64
# echo -n "$REDIS_PASS" | base64
# echo -n "$JWT_SECRET" | base64
#
# # Database URLs:
# echo -n "jdbc:postgresql://postgres.devops.svc.cluster.local:5432/user_service_db" | base64
# echo -n "jdbc:postgresql://postgres.devops.svc.cluster.local:5432/order_service_db" | base64
# echo -n "jdbc:postgresql://postgres.devops.svc.cluster.local:5432/notification_service_db" | base64
# echo -n "jdbc:postgresql://postgres.devops.svc.cluster.local:5432/inventory_service_db" | base64
# echo -n "jdbc:postgresql://postgres.devops.svc.cluster.local:5432/audit_service_db" | base64