apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: microservices
  labels:
    app: user-service
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
        version: v1
    spec:
      containers:
      - name: user-service
        image: user-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8081
          name: http
        env:
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            secretKeyRef:
              name: microservices-secrets
              key: USER_SERVICE_DB_URL
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: microservices-secrets
              key: SPRING_DATASOURCE_USERNAME
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: microservices-secrets
              key: SPRING_DATASOURCE_PASSWORD
        - name: SPRING_DATA_REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: REDIS_HOST
        - name: SPRING_DATA_REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: REDIS_PORT
        - name: SPRING_DATA_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: microservices-secrets
              key: SPRING_DATA_REDIS_PASSWORD
        - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: SPRING_KAFKA_BOOTSTRAP_SERVERS
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: microservices-secrets
              key: JWT_SECRET
        - name: JWT_EXPIRATION
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: JWT_EXPIRATION
        envFrom:
        - configMapRef:
            name: microservices-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: microservices
  labels:
    app: user-service
spec:
  selector:
    app: user-service
  ports:
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: http
  type: ClusterIP