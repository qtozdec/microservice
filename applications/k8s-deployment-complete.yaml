# Complete Kubernetes deployment for Microservices Platform
# This file contains all necessary resources to deploy the platform

# ==============================================
# NAMESPACES
# ==============================================
apiVersion: v1
kind: Namespace
metadata:
  name: devops
  labels:
    name: devops
    purpose: enterprise-devops
---
apiVersion: v1
kind: Namespace
metadata:
  name: microservices
  labels:
    name: microservices
    purpose: application-services
---

# ==============================================
# POSTGRES (Infrastructure)
# ==============================================
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: devops
  labels:
    app: postgres
type: Opaque
data:
  # postgres
  POSTGRES_PASSWORD: cG9zdGdyZXNfcGFzcw==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: devops
  labels:
    app: postgres
data:
  POSTGRES_DB: "devops"
  POSTGRES_USER: "postgres"
  PGDATA: "/var/lib/postgresql/data/pgdata"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-initdb
  namespace: devops
  labels:
    app: postgres
data:
  init.sql: |
    -- Create databases for microservices
    CREATE DATABASE user_service_db;
    CREATE DATABASE order_service_db;
    CREATE DATABASE notification_service_db;
    CREATE DATABASE inventory_service_db;
    CREATE DATABASE audit_service_db;
    CREATE DATABASE gitlab;
    
    -- Create users for each service
    CREATE USER microservices_user WITH ENCRYPTED PASSWORD 'changeme';
    CREATE USER gitlab_user WITH ENCRYPTED PASSWORD 'gitlab_pass';
    
    -- Grant privileges on databases
    GRANT ALL PRIVILEGES ON DATABASE user_service_db TO microservices_user;
    GRANT ALL PRIVILEGES ON DATABASE order_service_db TO microservices_user;
    GRANT ALL PRIVILEGES ON DATABASE notification_service_db TO microservices_user;
    GRANT ALL PRIVILEGES ON DATABASE inventory_service_db TO microservices_user;
    GRANT ALL PRIVILEGES ON DATABASE audit_service_db TO microservices_user;
    GRANT ALL PRIVILEGES ON DATABASE gitlab TO gitlab_user;
    
    -- Connect to each database and grant schema privileges
    \c user_service_db;
    GRANT ALL PRIVILEGES ON SCHEMA public TO microservices_user;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO microservices_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO microservices_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON TABLES TO microservices_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON SEQUENCES TO microservices_user;
    
    \c order_service_db;
    GRANT ALL PRIVILEGES ON SCHEMA public TO microservices_user;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO microservices_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO microservices_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON TABLES TO microservices_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON SEQUENCES TO microservices_user;
    
    \c notification_service_db;
    GRANT ALL PRIVILEGES ON SCHEMA public TO microservices_user;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO microservices_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO microservices_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON TABLES TO microservices_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON SEQUENCES TO microservices_user;
    
    \c inventory_service_db;
    GRANT ALL PRIVILEGES ON SCHEMA public TO microservices_user;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO microservices_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO microservices_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON TABLES TO microservices_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON SEQUENCES TO microservices_user;
    
    \c audit_service_db;
    GRANT ALL PRIVILEGES ON SCHEMA public TO microservices_user;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO microservices_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO microservices_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON TABLES TO microservices_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON SEQUENCES TO microservices_user;
    
    \c gitlab;
    GRANT ALL PRIVILEGES ON SCHEMA public TO gitlab_user;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO gitlab_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO gitlab_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON TABLES TO gitlab_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON SEQUENCES TO gitlab_user;
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: devops
  labels:
    app: postgres
spec:
  serviceName: postgres-headless
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15-alpine
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: false  # PostgreSQL requires root during initialization
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        envFrom:
        - configMapRef:
            name: postgres-config
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-initdb
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: postgres-initdb
        configMap:
          name: postgres-initdb
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
      labels:
        app: postgres
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: devops
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless
  namespace: devops
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  clusterIP: None
---

# ==============================================
# REDIS (Infrastructure)
# ==============================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: devops
  labels:
    app: redis
spec:
  replicas: 2
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 999
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        args:
        - --requirepass
        - RedisSecure2024!
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: devops
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  type: ClusterIP
---

# ==============================================
# MICROSERVICES CONFIGURATION
# ==============================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: microservices-config
  namespace: microservices
  labels:
    app: microservices
data:
  # Database Configuration
  DB_HOST: "postgres.devops.svc.cluster.local"
  DB_PORT: "5432"
  
  # Redis Configuration 
  REDIS_HOST: "redis.devops.svc.cluster.local"
  REDIS_PORT: "6379"
  
  # Kafka Configuration
  SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka.devops.svc.cluster.local:9092"
  
  # JWT Configuration
  JWT_EXPIRATION: "86400000"
  JWT_REFRESH_EXPIRATION: "604800000"
  
  # Application Configuration
  APP_NAME: "Microservices Platform"
  APP_VERSION: "1.0.0"
  APP_ENVIRONMENT: "kubernetes"
  DEBUG_MODE: "true"
  LOG_LEVEL: "INFO"
  ENABLE_SWAGGER: "true"
  ENABLE_ACTUATOR: "true"
  ENABLE_METRICS: "true"
  
  # Spring Configuration
  SPRING_PROFILES_ACTIVE: "kubernetes"
  SPRING_JPA_HIBERNATE_DDL_AUTO: "update"
  SPRING_JPA_SHOW_SQL: "false"
  
  # Management/Actuator
  MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "health,info,metrics,prometheus"
  MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: "always"
  MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: "true"
---
apiVersion: v1
kind: Secret
metadata:
  name: microservices-secrets
  namespace: microservices
  labels:
    app: microservices
type: Opaque
stringData:
  # Database Configuration
  SPRING_DATASOURCE_USERNAME: "microservices_user"
  SPRING_DATASOURCE_PASSWORD: "changeme"
  
  # Redis Configuration
  SPRING_DATA_REDIS_PASSWORD: "RedisSecure2024!"
  
  # JWT Secret
  JWT_SECRET: "supersecurejwtsecretkey256bitslongforproductionuse12345"
  
  # Database URLs for each service
  USER_SERVICE_DB_URL: "jdbc:postgresql://postgres.devops.svc.cluster.local:5432/user_service_db"
  ORDER_SERVICE_DB_URL: "jdbc:postgresql://postgres.devops.svc.cluster.local:5432/order_service_db"
  NOTIFICATION_SERVICE_DB_URL: "jdbc:postgresql://postgres.devops.svc.cluster.local:5432/notification_service_db"
  INVENTORY_SERVICE_DB_URL: "jdbc:postgresql://postgres.devops.svc.cluster.local:5432/inventory_service_db"
  AUDIT_SERVICE_DB_URL: "jdbc:postgresql://postgres.devops.svc.cluster.local:5432/audit_service_db"
---

# ==============================================
# USER SERVICE
# ==============================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: microservices
  labels:
    app: user-service
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
        version: v1
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: user-service
        image: user-service:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 8081
          name: http
        env:
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            secretKeyRef:
              name: microservices-secrets
              key: USER_SERVICE_DB_URL
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: microservices-secrets
              key: SPRING_DATASOURCE_USERNAME
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: microservices-secrets
              key: SPRING_DATASOURCE_PASSWORD
        - name: SPRING_DATA_REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: REDIS_HOST
        - name: SPRING_DATA_REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: REDIS_PORT
        - name: SPRING_DATA_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: microservices-secrets
              key: SPRING_DATA_REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: microservices-secrets
              key: JWT_SECRET
        - name: JWT_EXPIRATION
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: JWT_EXPIRATION
        envFrom:
        - configMapRef:
            name: microservices-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: microservices
  labels:
    app: user-service
spec:
  selector:
    app: user-service
  ports:
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: http
  type: ClusterIP
---

# ==============================================
# ORDER SERVICE
# ==============================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: microservices
  labels:
    app: order-service
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
        version: v1
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: order-service
        image: order-service:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 8082
          name: http
        env:
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            secretKeyRef:
              name: microservices-secrets
              key: ORDER_SERVICE_DB_URL
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: microservices-secrets
              key: SPRING_DATASOURCE_USERNAME
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: microservices-secrets
              key: SPRING_DATASOURCE_PASSWORD
        - name: SPRING_DATA_REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: REDIS_HOST
        - name: SPRING_DATA_REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: REDIS_PORT
        - name: SPRING_DATA_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: microservices-secrets
              key: SPRING_DATA_REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: microservices-secrets
              key: JWT_SECRET
        - name: JWT_EXPIRATION
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: JWT_EXPIRATION
        envFrom:
        - configMapRef:
            name: microservices-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: microservices
  labels:
    app: order-service
spec:
  selector:
    app: order-service
  ports:
  - port: 8082
    targetPort: 8082
    protocol: TCP
    name: http
  type: ClusterIP