apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  namespace: microservices
  labels:
    app: notification-service
    component: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: notification-service
  template:
    metadata:
      labels:
        app: notification-service
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8083"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      containers:
      - name: notification-service
        image: notification-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8083
          name: http
        env:
        # Server Configuration
        - name: SERVER_PORT
          value: "8083"
        - name: SPRING_APPLICATION_NAME
          value: "notification-service"
        
        # Database Configuration
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            secretKeyRef:
              name: microservices-secret
              key: notification-service-db-url
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: SPRING_DATASOURCE_DRIVER_CLASS_NAME
          value: "org.postgresql.Driver"
        
        # Database Connection Pool
        - name: SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE
          value: "10"
        - name: SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE
          value: "5"
        - name: SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT
          value: "20000"
        
        # JPA/Hibernate Configuration
        - name: SPRING_JPA_HIBERNATE_DDL_AUTO
          value: "validate"
        - name: SPRING_JPA_SHOW_SQL
          value: "false"
        - name: SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT
          value: "org.hibernate.dialect.PostgreSQLDialect"
        
        # Liquibase
        - name: SPRING_LIQUIBASE_ENABLED
          value: "true"
        
        # Redis Configuration
        - name: SPRING_DATA_REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: microservices-secret
              key: redis-host
        - name: SPRING_DATA_REDIS_PORT
          value: "6379"
        - name: SPRING_DATA_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        - name: SPRING_DATA_REDIS_TIMEOUT
          value: "2000ms"
        
        # Kafka Configuration
        - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            secretKeyRef:
              name: microservices-secret
              key: kafka-bootstrap-servers
        
        # Actuator/Management Configuration
        - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
          value: "health,info,metrics,prometheus"
        - name: MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS
          value: "always"
        - name: MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED
          value: "true"
        
        # Health and readiness probes
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8083
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8083
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Resource limits and requests
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        
        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
---
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  namespace: microservices
  labels:
    app: notification-service
    component: backend
spec:
  type: ClusterIP
  ports:
  - port: 8083
    targetPort: 8083
    protocol: TCP
    name: http
  selector:
    app: notification-service